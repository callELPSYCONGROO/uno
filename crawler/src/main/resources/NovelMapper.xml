<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="indi.smt.uno.crawler.dao.NovelMapper">
    <resultMap id="BaseResultMap" type="indi.smt.uno.crawler.entity.Novel">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="cateId" property="cateId" jdbcType="INTEGER"/>
        <result column="title" property="title" jdbcType="VARCHAR"/>
        <result column="insertTime" property="insertTime" jdbcType="TIMESTAMP"/>
        <result column="author" property="author" jdbcType="VARCHAR"/>
        <result column="isShow" property="isShow" jdbcType="INTEGER"/>
        <result column="createTime" property="createTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <resultMap id="ResultMapWithBLOBs" type="indi.smt.uno.crawler.entity.Novel" extends="BaseResultMap">
        <result column="content" property="content" jdbcType="LONGVARCHAR"/>
    </resultMap>
    <sql id="Criteria_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Criteria_Where_Clause">
        <where>
            <foreach collection="criteria.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, cateId, title, insertTime, author, isShow, createTime
  </sql>
    <sql id="Blob_Column_List">
    content
  </sql>
    <select id="selectByCriteriaWithBLOBs" resultMap="ResultMapWithBLOBs"
            parameterType="indi.smt.uno.crawler.entity.NovelCriteria">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from novel
        <if test="_parameter != null">
            <include refid="Criteria_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByCriteria" resultMap="BaseResultMap" parameterType="indi.smt.uno.crawler.entity.NovelCriteria">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        from novel
        <if test="_parameter != null">
            <include refid="Criteria_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="limitStart != null and limitStart>=0">
            limit #{limitStart} , #{limitEnd}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from novel
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from novel
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByCriteria" parameterType="indi.smt.uno.crawler.entity.NovelCriteria">
        delete from novel
        <if test="_parameter != null">
            <include refid="Criteria_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="indi.smt.uno.crawler.entity.Novel">
    insert into novel (id, cateId, title, 
      insertTime, author, isShow,
      createTime, content)
    values (#{id,jdbcType=INTEGER}, #{cateId,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, 
      #{insertTime,jdbcType=TIMESTAMP}, #{author,jdbcType=VARCHAR}, #{isShow,jdbcType=INTEGER},
      #{createTime,jdbcType=TIMESTAMP}, #{content,jdbcType=LONGVARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="indi.smt.uno.crawler.entity.Novel">
        insert into novel
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="cateId != null">
                cateId,
            </if>
            <if test="title != null">
                title,
            </if>
            <if test="insertTime != null">
                insertTime,
            </if>
            <if test="author != null">
                author,
            </if>
            <if test="isShow != null">
                isShow,
            </if>
            <if test="createTime != null">
                createTime,
            </if>
            <if test="content != null">
                content,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="cateId != null">
                #{cateId,jdbcType=INTEGER},
            </if>
            <if test="title != null">
                #{title,jdbcType=VARCHAR},
            </if>
            <if test="insertTime != null">
                #{insertTime,jdbcType=TIMESTAMP},
            </if>
            <if test="author != null">
                #{author,jdbcType=VARCHAR},
            </if>
            <if test="isShow != null">
                #{isShow,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="content != null">
                #{content,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByCriteria" parameterType="indi.smt.uno.crawler.entity.NovelCriteria"
            resultType="java.lang.Integer">
        select count(*) from novel
        <if test="_parameter != null">
            <include refid="Criteria_Where_Clause"/>
        </if>
    </select>
    <update id="updateByCriteriaSelective" parameterType="map">
        update novel
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.cateId != null">
                cateId = #{record.cateId,jdbcType=INTEGER},
            </if>
            <if test="record.title != null">
                title = #{record.title,jdbcType=VARCHAR},
            </if>
            <if test="record.insertTime != null">
                insertTime = #{record.insertTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.author != null">
                author = #{record.author,jdbcType=VARCHAR},
            </if>
            <if test="record.isShow != null">
                isShow = #{record.isShow,jdbcType=INTEGER},
            </if>
            <if test="record.createTime != null">
                createTime = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.content != null">
                content = #{record.content,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Criteria_Where_Clause"/>
        </if>
    </update>
    <update id="updateByCriteriaWithBLOBs" parameterType="map">
        update novel
        set id = #{record.id,jdbcType=INTEGER},
        cateId = #{record.cateId,jdbcType=INTEGER},
        title = #{record.title,jdbcType=VARCHAR},
        insertTime = #{record.insertTime,jdbcType=TIMESTAMP},
        author = #{record.author,jdbcType=VARCHAR},
        isShow = #{record.isShow,jdbcType=INTEGER},
        createTime = #{record.createTime,jdbcType=TIMESTAMP},
        content = #{record.content,jdbcType=LONGVARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Criteria_Where_Clause"/>
        </if>
    </update>
    <update id="updateByCriteria" parameterType="map">
        update novel
        set id = #{record.id,jdbcType=INTEGER},
        cateId = #{record.cateId,jdbcType=INTEGER},
        title = #{record.title,jdbcType=VARCHAR},
        insertTime = #{record.insertTime,jdbcType=TIMESTAMP},
        author = #{record.author,jdbcType=VARCHAR},
        isShow = #{record.isShow,jdbcType=INTEGER},
        createTime = #{record.createTime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Criteria_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="indi.smt.uno.crawler.entity.Novel">
        update novel
        <set>
            <if test="cateId != null">
                cateId = #{cateId,jdbcType=INTEGER},
            </if>
            <if test="title != null">
                title = #{title,jdbcType=VARCHAR},
            </if>
            <if test="insertTime != null">
                insertTime = #{insertTime,jdbcType=TIMESTAMP},
            </if>
            <if test="author != null">
                author = #{author,jdbcType=VARCHAR},
            </if>
            <if test="isShow != null">
                isShow = #{isShow,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                createTime = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="indi.smt.uno.crawler.entity.Novel">
    update novel
    set cateId = #{cateId,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      insertTime = #{insertTime,jdbcType=TIMESTAMP},
      author = #{author,jdbcType=VARCHAR},
      isShow = #{isShow,jdbcType=INTEGER},
      createTime = #{createTime,jdbcType=TIMESTAMP},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <update id="updateByPrimaryKey" parameterType="indi.smt.uno.crawler.entity.Novel">
    update novel
    set cateId = #{cateId,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      insertTime = #{insertTime,jdbcType=TIMESTAMP},
      author = #{author,jdbcType=VARCHAR},
      isShow = #{isShow,jdbcType=INTEGER},
      createTime = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <sql id="Model_Where_Clause">
        <where>
            <if test="id != null">
                and id=#{id}
            </if>
            <if test="cateId != null">
                and cateId=#{cateId}
            </if>
            <if test="title != null">
                and title=#{title}
            </if>
            <if test="insertTime != null">
                and insertTime=#{insertTime}
            </if>
            <if test="author != null">
                and author=#{author}
            </if>
            <if test="isShow != null">
                and isShow=#{isShow}
            </if>
            <if test="createTime != null">
                and createTime=#{createTime}
            </if>
        </where>
    </sql>
    <select id="countByModel" parameterType="indi.smt.uno.crawler.entity.Novel" resultType="java.lang.Integer">
        select count(*) from novel
        <if test="_parameter != null">
            <include refid="Model_Where_Clause"/>
        </if>
    </select>
    <select id="selectByModelWithBLOBs" resultMap="ResultMapWithBLOBs"
            parameterType="indi.smt.uno.crawler.entity.Novel">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from novel
        <if test="_parameter != null">
            <include refid="Model_Where_Clause"/>
        </if>
    </select>
    <select id="selectByModel" resultMap="BaseResultMap" parameterType="indi.smt.uno.crawler.entity.Novel">
        select
        <include refid="Base_Column_List"/>
        from novel
        <if test="_parameter != null">
            <include refid="Model_Where_Clause"/>
        </if>
    </select>
    <insert id="insertBatch" parameterType="indi.smt.uno.crawler.entity.Novel">
        insert into novel
        (cateId, title,
        insertTime, author,
        isShow, createTime, content
        )
        values
        <foreach collection="list" item="novel" separator=",">
            (#{novel.cateId,jdbcType=INTEGER}, #{novel.title,jdbcType=VARCHAR},
            #{novel.insertTime,jdbcType=TIMESTAMP}, #{novel.author,jdbcType=VARCHAR},
            #{novel.isShow,jdbcType=INTEGER}, #{novel.createTime,jdbcType=TIMESTAMP},
            #{novel.content,jdbcType=LONGVARCHAR})
        </foreach>
    </insert>
    <cache/>
</mapper>